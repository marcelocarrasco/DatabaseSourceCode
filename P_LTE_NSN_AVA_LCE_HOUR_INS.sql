--------------------------------------------------------
--  DDL for Procedure P_LTE_NSN_AVA_LCE_HOUR_INS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "HARRIAGUE"."P_LTE_NSN_AVA_LCE_HOUR_INS" (P_FECHA_DESDE IN CHAR, P_FECHA_HASTA IN CHAR)
IS
-- Autor: Mariano Moron. Fecha: 04.09.2015.
-- Actualizacion: Mariano Morón. Fecha: 08.09.2015. Motivo: Se agregan parametros de entrada.
-- Actualizacion: Mariano Morón. Fecha: 09.09.2015. Motivo: Estandarización de nombres.
DML_ERRORS EXCEPTION;
PRAGMA EXCEPTION_INIT(DML_ERRORS, -24381);
    -- LOG --
L_ERRORS NUMBER;
L_ERRNO    NUMBER;
L_MSG    VARCHAR2(4000);
L_IDX    NUMBER;
  -- END LOG --

LIMIT_IN PLS_INTEGER := 100;

TYPE T_ARRAY_TAB IS TABLE OF LTE_NSN_AVAIL_LCEL_HOUR%ROWTYPE;
T_ARRAY_COL T_ARRAY_TAB;

CURSOR CUR (FECHA_DESDE VARCHAR2, FECHA_HASTA VARCHAR2) IS
SELECT
  TRUNC(T4.PERIOD_START_TIME, 'HH24') AS FECHA,
  T4.MRBTS_ID,
  T4.LNBTS_ID,
  T4.LNCEL_ID,

  NVL(SUM(T4.SAMPLES_CELL_AVAIL)             ,0 ) AS AVAILABILITY_NUM ,
  NVL(SUM(T4.DENOM_CELL_AVAIL)               ,0 ) AS AVAILABILITY_DEN,

  NVL(SUM(T2.DISC_RRC_PAGING)                ,0 ) AS RRC_PAGING_DISCARD_NUM,
  NVL(SUM(T2.RRC_PAGING_REQUESTS)            ,0 ) AS RRC_PAGING_DISCARD_DEN

FROM NOKLTE_PS_LCELAV_MNC1_RAW T4
LEFT OUTER JOIN  NOKLTE_PS_LRRC_MNC1_RAW T2
ON T4.MRBTS_ID = T2.MRBTS_ID
AND T4.LNBTS_ID = T2.LNBTS_ID
AND T4.LNCEL_ID = T2.LNCEL_ID
AND T4.PERIOD_START_TIME = T2.PERIOD_START_TIME
LEFT OUTER JOIN LTE_NSN_AVAIL_LCEL_HOUR T5
ON T4.MRBTS_ID = T5.MRBTS_ID
AND T4.LNBTS_ID = T5.LNBTS_ID
AND T4.LNCEL_ID = T5.LNCEL_ID
AND TRUNC(T4.PERIOD_START_TIME, 'HH24') = T5.FECHA

WHERE T4.PERIOD_START_TIME BETWEEN TO_DATE(FECHA_DESDE, 'DD.MM.YYYY HH24')
                               AND TO_DATE(FECHA_HASTA, 'DD.MM.YYYY HH24')
AND T5.LNCEL_ID IS NULL
AND T5.FECHA IS NULL

GROUP BY TRUNC(T4.PERIOD_START_TIME, 'HH24'), T4.MRBTS_ID, T4.LNBTS_ID, T4.LNCEL_ID,T4.MCC_ID, T4.MNC_ID;

 BEGIN
 OPEN CUR (P_FECHA_DESDE, P_FECHA_HASTA);
  LOOP
    FETCH CUR BULK COLLECT INTO T_ARRAY_COL LIMIT LIMIT_IN;
    BEGIN
      FORALL I IN 1 .. T_ARRAY_COL.COUNT SAVE EXCEPTIONS
        INSERT INTO LTE_NSN_AVAIL_LCEL_HOUR VALUES T_ARRAY_COL (I);
    EXCEPTION
      WHEN DML_ERRORS THEN
        -- CAPTURE EXCEPTIONS TO PERFORM OPERATIONS DML
             L_ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
                FOR I IN 1 .. L_ERRORS
                LOOP
                    L_ERRNO := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
                    L_MSG   := SQLERRM(-L_ERRNO);
                    L_IDX   := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
                    /*
                    INSERT INTO ERROR_LOG(ID, IMPORT_DATE, SOURCE, TARGET, LNBTS_ID, LNCEL_ID, PERIOD_START_TIME,
                     MCC_ID, MNC_ID, ERROR_NRO, ERROR_MESG)
                    VALUES
                    (SEQ_ERROR_LOG.NEXTVAL,SYSDATE,P_SOURCE1_TABLE,P_TARGET_TABLE,T_ARRAY_COL(L_IDX).LNBTS_ID,
                     T_ARRAY_COL(L_IDX).LNCEL_ID,T_ARRAY_COL(L_IDX).PERIOD_START_TIME,T_ARRAY_COL(L_IDX).MCC_ID,
                     T_ARRAY_COL(L_IDX).MNC_ID, L_ERRNO,L_MSG );
          */
                END LOOP;
    -- END --
    END;
    EXIT WHEN CUR%NOTFOUND;
  END LOOP;
  COMMIT;
  CLOSE CUR;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;

/
